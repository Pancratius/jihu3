package com.hiko.gym.common.repository.redis;

import java.text.*;
import java.util.*;

import javax.annotation.*;

import org.springframework.data.redis.core.*;
import org.springframework.stereotype.*;

/**
 * 客户推送令牌对象实现类
 * 
 * @author cychen
 *
 */
@Repository("rCustomerPushTokenObject")
public class RCustomerPushTokenObjectImpl implements RCustomerPushTokenObject {

	/** Redis模板 */
	@Resource(name = "redisTemplate")
	private RedisTemplate<String, String> redisTemplate = null;

	/** 键值格式 */
	private static final MessageFormat KEY_FORMAT = new MessageFormat("Object:CustomerPushToken:{0}");

	/**
	 * 设置客户推送令牌对象
	 * 
	 * @param customerId 客户标识
	 * @param customerPushToken 客户推送令牌对象
	 */
	@Override
	public void set(Long customerId, RCustomerPushToken customerPushToken) {
		// 初始化
		Map<String, String> map = new HashMap<String, String>();
		String key = KEY_FORMAT.format(new Long[] { customerId });

		// 赋值参数
		if (customerPushToken.getOsType() != null) {
			map.put(RCustomerPushToken.OSTYPE, customerPushToken.getOsType().toString());
		}
		if (customerPushToken.getPushToken() != null) {
			map.put(RCustomerPushToken.PUSHTOKEN, customerPushToken.getPushToken());
		}

		// 调用接口
		redisTemplate.opsForHash().putAll(key, map);
	}

	/**
	 * 获取客户推送令牌对象
	 * 
	 * @param customerId 客户标识
	 * @return 客户推送令牌对象
	 */
	@Override
	public RCustomerPushToken get(Long customerId) {
		// 初始化
		RCustomerPushToken customerPushToken = null;
		List<String> keyList = new ArrayList<String>();
		String key = KEY_FORMAT.format(new Long[] { customerId });

		// 赋值参数
		keyList.add(RCustomerPushToken.OSTYPE);
		keyList.add(RCustomerPushToken.PUSHTOKEN);

		// 调用接口
		HashOperations<String, String, String> objectOperations = redisTemplate.opsForHash();
		List<String> valueList = objectOperations.multiGet(key, keyList);

		// 转化数据
		if (valueList != null && !valueList.isEmpty()) {
			customerPushToken = new RCustomerPushToken();
			String[] valueArray = valueList.toArray(new String[0]);
			int length = valueArray.length;
			if (length > 0 && valueArray[0] != null) {
				customerPushToken.setOsType(Short.parseShort(valueArray[0]));
			}
			if (length > 1 && valueArray[1] != null) {
				customerPushToken.setPushToken(valueArray[1]);
			}
		}

		// 返回数据
		return customerPushToken;
	}

	/**
	 * 删除客户推送令牌对象
	 * 
	 * @param customerId 客户标识
	 */
	@Override
	public void remove(Long customerId) {
		// 初始化
		String key = KEY_FORMAT.format(new Long[] { customerId });

		// 调用接口
		redisTemplate.delete(key);
	}

	/**
	 * 存在客户推送令牌对象
	 * 
	 * @param customerId 客户标识
	 * @return 是否存在
	 */
	@Override
	public boolean exist(Long customerId) {
		// 初始化
		String key = KEY_FORMAT.format(new Long[] { customerId });

		// 调用接口
		return redisTemplate.hasKey(key);
	}

	/**
	 * 设置参数值
	 * 
	 * @param customerId 客户标识
	 * @param name 参数名称
	 * @param value 参数值
	 */
	@Override
	public void set(Long customerId, String name, String value) {
		// 初始化
		String key = KEY_FORMAT.format(new Long[] { customerId });

		// 调用接口
		redisTemplate.opsForHash().put(key, name, value);
	}

	/**
	 * 获取参数值
	 * 
	 * @param customerId 客户标识
	 * @param name 参数名称
	 * @return 参数值
	 */
	@Override
	public String get(Long customerId, String name) {
		// 初始化
		String key = KEY_FORMAT.format(new Long[] { customerId });

		// 调用接口
		HashOperations<String, String, String> objectOperations = redisTemplate.opsForHash();
		return objectOperations.get(key, name);
	}

	/**
	 * 删除参数值
	 * 
	 * @param customerId 客户标识
	 * @param name 参数名称
	 */
	@Override
	public void remove(Long customerId, String name) {
		// 初始化
		String key = KEY_FORMAT.format(new Long[] { customerId });

		// 调用接口
		HashOperations<String, String, String> objectOperations = redisTemplate.opsForHash();
		objectOperations.delete(key, name);
	}

	/**
	 * 存在参数值
	 * 
	 * @param customerId 客户标识
	 * @param name 参数名称
	 * @return 持久化异常
	 */
	@Override
	public boolean exist(Long customerId, String name) {
		// 初始化
		String key = KEY_FORMAT.format(new Long[] { customerId });

		// 调用接口
		HashOperations<String, String, String> objectOperations = redisTemplate.opsForHash();
		return objectOperations.hasKey(key, name);
	}

}
