package com.yqbing.servicebing.service.impl;

import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.yqbing.servicebing.common.ErrorCodeEnum;
import com.yqbing.servicebing.repository.database.bean.StoreInfo;
import com.yqbing.servicebing.repository.database.bean.StoreUser;
import com.yqbing.servicebing.repository.database.bean.UserInfoBean;
import com.yqbing.servicebing.repository.database.dao.StoreInfoMapper;
import com.yqbing.servicebing.repository.database.dao.StoreUserMapper;
import com.yqbing.servicebing.repository.database.dao.UserInfoBeanMapper;
import com.yqbing.servicebing.service.CommonService;
import com.yqbing.servicebing.service.StoreInfoService;
import com.yqbing.servicebing.utils.NotifyUtil;
import com.yqbing.servicebing.webapp.request.StoreInfoReq;


@Service("storeInfoService")
@SuppressWarnings("all")
public class StoreInfoServiceImpl extends CommonService implements StoreInfoService{

	private static final Logger LOGGER = LoggerFactory.getLogger(StoreInfoServiceImpl.class);
	
	@Resource
	private StoreUserMapper  storeUserMapper;
	@Resource
	private StoreInfoMapper  storeInfoMapper;
	@Resource
	private UserInfoBeanMapper  userInfoBeanMapper;
	
	
	
	@Override
	public String register(StoreInfoReq req) {//
		//判断是否申请过店铺
		
		//如果没有在申请
		
		//如果有不能申请
		
		
		return null;
	}



	@Override
	public String ifRegister(String token) {
		
		UserInfoBean infoBean = queryTokenByUser(token);
		if(infoBean == null){
			return NotifyUtil.error(ErrorCodeEnum.NOLOGIN, "用户不存在");
			
		} 
	    //先判断是否开店
		StoreUser su = storeUserMapper.selectByUserId(infoBean.getId());
		if(su == null){
			return NotifyUtil.success();
		}else{
			if(su.getStatus() == 2){//店员不能开店
				return NotifyUtil.error(ErrorCodeEnum.ASSISTANTSRORE, "店员不能开店");
			}
		}
		//没有开店 --> 是否是店长
		
		 return NotifyUtil.error(ErrorCodeEnum.SRORE, "店铺存在");
	}



	@Override
	public String queryStore(String token) {
		
		UserInfoBean infoBean = queryTokenByUser(token);
		if(infoBean == null){
			return NotifyUtil.error(ErrorCodeEnum.NOLOGIN, "用户不存在");
			
		} 
		
		StoreUser su = storeUserMapper.selectByUserId(infoBean.getId());
		if(su == null){
			return NotifyUtil.error(ErrorCodeEnum.NOTSRORE, "店铺不存在");
		}
		
		StoreInfo storeInfo = storeInfoMapper.selectByPrimaryKey(su.getStoreId());
		StoreInfoReq sq = null;
		
		if(storeInfo != null){
			
			sq = new StoreInfoReq();
			sq.setStoreId(storeInfo.getStoreId());
			sq.setAddress(storeInfo.getStoreAddress());
			sq.setCardBack(storeInfo.getIdcardbackurl());
			sq.setCardFace(storeInfo.getIdcardfaceurl());
			sq.setCertName(storeInfo.getStoreName());
			sq.setPhone(storeInfo.getPhone());
			sq.setStoreLicense(storeInfo.getStoreLicense());
			sq.setStoreName(storeInfo.getStoreName());
			sq.setCitys(storeInfo.getProvinceName()+"-"+storeInfo.getCityName()+"-"+storeInfo.getAreaName());
		
		}
		
		return NotifyUtil.success(sq);
	}



	@Override
	public String quereyStoreName(String code) {
		
		StoreInfo storeInfo = storeInfoMapper.selectByCode(code);
		StoreInfoReq sq = null;
		
		if(storeInfo != null){
			
			sq = new StoreInfoReq();
			sq.setStoreId(storeInfo.getStoreId());
			sq.setStoreName(storeInfo.getStoreName());
			sq.setCitys(storeInfo.getProvinceName()+"-"+storeInfo.getCityName()+"-"+storeInfo.getAreaName());
		
		}
		
		return NotifyUtil.success(sq);
	}


	

	@Override
	public String myStaff(String token) {
		
		UserInfoBean infoBean = queryTokenByUser(token);
		if(infoBean == null){
			return NotifyUtil.error(ErrorCodeEnum.NOLOGIN, "用户不存在");
			
		} 
		
		Short s = 3;//店长
		
		StoreUser su = storeUserMapper.selectByUserIdAndStatus(infoBean.getId(),s);
		
		if(su == null){
			return NotifyUtil.error(ErrorCodeEnum.NOTSRORE, "店铺不存在");
		}
		
		Short s1 = 2;//店长
		
		List<StoreUser>  sus = storeUserMapper.selectBystoreIdAndStatus(su.getStoreId(),s1);
		
		
		
		return NotifyUtil.success(sus);
	}



	@Override
	public String joinStore(String token, Long storeId) {
		UserInfoBean infoBean = queryTokenByUser(token);
		if(infoBean == null){
			return NotifyUtil.error(ErrorCodeEnum.NOLOGIN, "用户不存在");
			
		} 
		
		Short s = 2;//店员
		
		StoreUser su = storeUserMapper.selectByUserIdAndStatus(infoBean.getId(),s);
		
		if(su == null){
		   
			StoreUser storeUser = new  StoreUser();
			storeUser.setStoreId(storeId);
			storeUser.setUserId(infoBean.getId());
			Short s2 = 2;//店员
			storeUser.setStatus(s2);
			storeUser.setCreateTime(new Date());
			try {
				LOGGER.info("--------------------------------------------/store/joinStore:"+storeUser);
				storeUserMapper.insertSelective(storeUser);
				return NotifyUtil.success();
			} catch (Exception e) {
			   e.printStackTrace();
			}
			
		}
		 return NotifyUtil.error(ErrorCodeEnum.ASSISTANTSRORE, "已经加入过门店");
	}



	@Override
	public String increaseWorker(String token, String name, String phone) {
		
		UserInfoBean infoBean = queryTokenByUser(token);
		if(infoBean == null){
			return NotifyUtil.error(ErrorCodeEnum.NOLOGIN, "用户不存在");
			
		} 
        Short s = 3;//店长
		
		StoreUser su = storeUserMapper.selectByUserIdAndStatus(infoBean.getId(),s);
		
		if(su == null){
			return NotifyUtil.error(ErrorCodeEnum.NOTSRORE, "店铺不存在");
		}
		UserInfoBean userInfoBean = userInfoBeanMapper.queryAndPhone(phone);
		if(userInfoBean != null){
			StoreUser storeUser = new  StoreUser();
			storeUser.setStoreId(su.getStoreId());
			storeUser.setUserId(userInfoBean.getId());
			Short s2 = 2;//店员
			storeUser.setStatus(s2);
			storeUser.setCreateTime(new Date());
			try {
				LOGGER.info("--------------------------------------------/store/increaseWorker:"+storeUser);
				storeUserMapper.insertSelective(storeUser);
				return NotifyUtil.success();
			} catch (Exception e) {
			   e.printStackTrace();
			}
			
		}
		
		
		return NotifyUtil.error(ErrorCodeEnum.OPERATERROE, "用户不存在");
	}



	@Override
	public String delWorker(String token, Long userId) {
		UserInfoBean infoBean = queryTokenByUser(token);
		if(infoBean == null){
			return NotifyUtil.error(ErrorCodeEnum.NOLOGIN, "用户不存在");
			
		} 
        Short s = 2;//店长
		
		StoreUser su = storeUserMapper.selectByUserIdAndStatus(userId,s);
		
		if(su == null){
			return NotifyUtil.error(ErrorCodeEnum.NOTSRORE, "店铺不存在");
		}
		try {
			
			storeUserMapper.deleteByPrimaryKey(su.getId());
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}
	
}
