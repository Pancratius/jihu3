package com.hiko.gym.common.repository.redis;

import java.text.*;
import java.util.*;

import javax.annotation.*;

import org.springframework.data.redis.core.*;
import org.springframework.stereotype.*;

/**
 * 场馆客户运动日期列表实现类
 * 
 * @author cychen
 *
 */
@Repository("rVenueCustomerSportDateList")
public class RVenueCustomerSportDateListImpl implements RVenueCustomerSportDateList {

	/** Redis模板 */
	@Resource(name = "redisTemplate")
	private RedisTemplate<String, String> redisTemplate = null;

	/** 键值格式 */
	private static final MessageFormat KEY_FORMAT = new MessageFormat("List:RVenueCustomerSportDateList:{0}");

	/**
	 * 添加运动日期
	 * 
	 * @param venueCustomerId 场馆客户标识
	 * @param sportDate 运动日期
	 */
	@Override
	public void add(String venueCustomerId, String sportDate) {
		// 生成键值
		String key = KEY_FORMAT.format(new String[] { venueCustomerId });

		// 删除取值
		redisTemplate.opsForList().remove(key, 0l, sportDate.toString());

		// 添加取值
		redisTemplate.opsForList().rightPush(key, sportDate.toString());
	}

	/**
	 * 删除运动日期
	 * 
	 * @param venueCustomerId 场馆客户标识
	 * @param sportDate 运动日期
	 */
	@Override
	public void remove(String venueCustomerId, String sportDate) {
		// 生成键值
		String key = KEY_FORMAT.format(new String[] { venueCustomerId });

		// 删除取值
		redisTemplate.opsForList().remove(key, 0l, sportDate.toString());
	}

	/**
	 * 存在运动日期
	 * 
	 * @param venueCustomerId 场馆客户标识
	 * @param sportDate 运动日期
	 * @return 是否存在
	 */
	@Override
	public Boolean exist(String venueCustomerId, String sportDate) {
		// 生成键值
		String key = KEY_FORMAT.format(new String[] { venueCustomerId });

		// 依次检查
		List<String> valueList = redisTemplate.opsForList().range(key, 0l, -1l);
		if (valueList != null) {
			for (String value : valueList) {
				if (sportDate.toString().equals(value)) {
					return Boolean.TRUE;
				}
			}
		}

		// 返回失败
		return Boolean.FALSE;
	}

	/**
	 * 获取列表大小
	 * 
	 * @param venueCustomerId 场馆客户标识
	 * @return 列表大小
	 */
	@Override
	public Long size(String venueCustomerId) {
		// 生成键值
		String key = KEY_FORMAT.format(new String[] { venueCustomerId });

		// 返回大小
		return redisTemplate.opsForList().size(key);
	}

	/**
	 * 最后运动日期
	 * 
	 * @param venueCustomerId 场馆客户标识
	 * @return 运动日期
	 */
	@Override
	public String last(String venueCustomerId) {
		// 生成键值
		String key = KEY_FORMAT.format(new String[] { venueCustomerId });

		// 返回数据
		return redisTemplate.opsForList().index(key, -1l);
	}

	/**
	 * 清除列表内容
	 * 
	 * @param venueCustomerId 场馆客户标识
	 */
	@Override
	public void clear(String venueCustomerId) {
		// 生成键值
		String key = KEY_FORMAT.format(new String[] { venueCustomerId });

		// 删除列表
		redisTemplate.delete(key);
	}

	/**
	 * 获取运动日期
	 * 
	 * @param venueCustomerId 场馆客户标识
	 * @param startIndex 开始序号
	 * @param endIndex 结束序号
	 * @return 运动日期列表
	 */
	public List<String> range(String venueCustomerId, Long startIndex, Long endIndex) {
		// 生成键值
		String key = KEY_FORMAT.format(new String[] { venueCustomerId });

		// 返回列表
		return redisTemplate.opsForList().range(key, startIndex, endIndex);
	}

}
