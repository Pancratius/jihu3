package com.hiko.gym.common.repository.redis;

import java.text.*;

import javax.annotation.*;

import org.springframework.data.redis.core.*;
import org.springframework.stereotype.*;

/**
 * 客户标识分享次数累加值接口实现
 * 
 * @author yinjy
 *
 */
@Repository("rCustomerIdShareCountValue")
public class RCustomerIdShareCountValueImpl implements RCustomerIdShareCountValue {
	/** Redis模板 */
	@Resource(name = "redisTemplate")
	private RedisTemplate<String, String> redisTemplate = null;

	/** 键值格式 */
	private static final MessageFormat KEY_FORMAT = new MessageFormat("Value:CustomerIdShareCount:{0}");

	/**
	 * 设置客户标识分享次数值
	 * 
	 * @param customerId 客户标识
	 * @param shareCount 分享次数值
	 */
	@Override
	public void set(Long customerId, Long shareCount) {
		// 初始化
		String key = KEY_FORMAT.format(new Long[] { customerId });

		// 调用接口
		redisTemplate.opsForValue().set(key, shareCount.toString());
	}

	/**
	 * 递增客户标识分享次数
	 * 
	 * @return 客户标识分享次数
	 */
	@Override
	public Long increment(Long customerId) {
		// 初始化
		String key = KEY_FORMAT.format(new Long[] { customerId });

		return redisTemplate.opsForValue().increment(key, 1l);
	}

	/**
	 * 获取分享次数值
	 * 
	 * @param customerId 客户标识
	 * @return 分享次数值
	 */
	@Override
	public Long get(Long customerId) {
		// 初始化
		String key = KEY_FORMAT.format(new Long[] { customerId });

		// 调用接口
		String value = redisTemplate.opsForValue().get(key);
		if (value != null) {
			return Long.valueOf(value);
		}
		return null;
	}

	/**
	 * 删除客户标识分享次数值
	 * 
	 * @param customerId 客户标识
	 */
	@Override
	public void remove(Long customerId) {
		// 初始化
		String key = KEY_FORMAT.format(new Long[] { customerId });

		// 调用接口
		redisTemplate.delete(key);
	}

	/**
	 * 存在客户标识分享次数值
	 * 
	 * @param customerId 客户标识
	 * @return 是否存在
	 */
	@Override
	public boolean exist(Long customerId) {
		// 初始化
		String key = KEY_FORMAT.format(new Long[] { customerId });

		// 调用接口
		return redisTemplate.hasKey(key);
	}

}
