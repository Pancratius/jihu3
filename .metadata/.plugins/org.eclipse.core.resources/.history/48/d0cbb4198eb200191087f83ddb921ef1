package com.yqbing.servicebing.webapp.controller;

import javax.annotation.Resource;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import net.sf.json.JSONObject;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.yqbing.servicebing.common.ErrorCodeEnum;
import com.yqbing.servicebing.service.HomePageService;
import com.yqbing.servicebing.service.StoreHouseService;
import com.yqbing.servicebing.service.StoreInfoService;
import com.yqbing.servicebing.utils.NotifyUtil;

/**
 * 

 * @ClassName: HomePageController

 * @Description: 主页

 * @author: mpb

 * @date: 2019年4月10日 下午1:24:06
 */
@RestController
@Api(tags = "首页接口")
@SuppressWarnings("all")
public class HomePageController extends BaseController{
	
	private static final Logger LOGGER = LoggerFactory.getLogger(HomePageController.class);
	@Resource
	private StoreHouseService storeHouseService = null;
	@Resource
	private HomePageService homePageService = null;
	 //首页
	//热门应用
	//游戏榜单
	//社交
	//应用推荐
	@RequestMapping(value = "/home/homePage",
        	method = {RequestMethod.GET,RequestMethod.POST})
	@ApiOperation(value = "首页")
	public String homePage(@ApiParam(name = "token",value="用户token") @RequestParam(value = "token", required = true) String token,
			@ApiParam(name="device",value = "设备mac") @RequestParam(value = "device", required = true) String device){
		
		LOGGER.info("--------------------------------------------home/homePage:"+token);
		String result = StringUtils.EMPTY;
		 try {
		/*  
		  String token = StringUtils.EMPTY;
		  String type = StringUtils.EMPTY;//1 首页 2游戏
		  try {
	    	  
	            JSONObject obj = JSONObject.fromObject(data);
	            token = obj.getString("token");
	            type = obj.getString("type");
	        } catch (Exception e) {
	        	
	        	LOGGER.error("系统异常" + e.getLocalizedMessage());
	           
	        }*/
		   if(!StringUtils.isNotBlank(token)){
	        	
       	   result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"token 信息必须填写");
   			
   			return result;
          }
		  result = homePageService.homePage(token,device);
		  
	 } catch (Exception e) {
		 e.printStackTrace();
		 result = NotifyUtil.error(ErrorCodeEnum.OPERATERROE,"操作失败");
 
        
     }
		return result;
	}
	
	
     //搜索
	 @ApiOperation(value = "首页搜索")
	 @RequestMapping(value = "/home/searchAppName",
	        	method = {RequestMethod.GET,RequestMethod.POST})
		public String searchAppName(@ApiParam(name = "appName",value="app名称") @RequestParam(value = "appName", required = true) String appName,
				@ApiParam(name = "token",value="用户token") @RequestParam(value = "token", required = true) String token){
		 
		 LOGGER.info("--------------------------------------------home/searchAppName:"+appName);
		    String result = StringUtils.EMPTY;
	        
	        try {
	        	if(!StringUtils.isNotBlank(token)){
		        	
	        	    result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"token必须填写");
	    			
	    			return result;
	        }
	        	  if(!StringUtils.isNotBlank(appName)){
	  	        	
		        	   result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"APPa名称必须填写");
		    			
		    			return result;
		        }
		        
		        result =  storeHouseService.searchAppName(appName,token);
	        } catch (Exception e) {
	        	
	        	LOGGER.error("系统异常" + e.getLocalizedMessage());
	        	result = NotifyUtil.error(ErrorCodeEnum.OPERATERROE,e.getLocalizedMessage());
	           
	        }
	      
		    return result;
	 }
	
	

	//应用详情/评论
	 @ApiOperation(value = "应用详情")
	@RequestMapping(value = "/home/appDatails",
		        	method = {RequestMethod.GET,RequestMethod.POST})
	public String appDatails(@ApiParam(name = "appPack",value="包名") @RequestParam(value = "appPack", required = true) String appPack,
			@ApiParam(name = "token",value="用户token") @RequestParam(value = "token", required = true) String token){
			 
		 LOGGER.info("--------------------------------------------home/appDatails:"+appPack);
			    String result = StringUtils.EMPTY;
		        
		        try {
		        	 if(!StringUtils.isNotBlank(appPack)){
				        	
			        	    result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"APP的包名必须填写");
			    			
			    			return result;
			        }
			        
			        result =  storeHouseService.appDatails(appPack,token);
			        LOGGER.info("--------------------------------------------应用详情:----home/appDatails:"+result);
		        } catch (Exception e) {
		        	
		        	LOGGER.error("系统异常" + e.getLocalizedMessage());
		        	result = NotifyUtil.error(ErrorCodeEnum.OPERATERROE,e.getLocalizedMessage());
		           
		        }
		       
			    return result;
		 }
	//推荐应用
		 @ApiOperation(value = "推荐应用")
		@RequestMapping(value = "/home/recommendApps",
			        	method = {RequestMethod.GET,RequestMethod.POST})
		public String recommendApps(
				@ApiParam(name = "token",value="用户token") @RequestParam(value = "token", required = true) String token,
				@ApiParam(name = "type",value="类型1.本机-应用推荐 2.热门搜索 3.一键下载") @RequestParam(value = "type", required = false) Integer type){
				 
			 LOGGER.info("--------------------------------------------home/recommendApps:"+type);
				    String result = StringUtils.EMPTY;
			        
			        try {
			        	 if(!StringUtils.isNotBlank(token)){
					        	
				        	    result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"token必须填写");
				    			
				    			return result;
				        }
				        
				        result =  storeHouseService.recommendApps(token,type);
			         
			        } catch (Exception e) {
			        	
			        	LOGGER.error("系统异常" + e.getLocalizedMessage());
			        	result = NotifyUtil.error(ErrorCodeEnum.OPERATERROE,e.getLocalizedMessage());
			           
			        }
			       
				    return result;
			 }
	
	
	
	//发表评论
	 @ApiOperation(value = "发表评论")
	 @RequestMapping(value = "/home/appraise",
        	method = {RequestMethod.GET,RequestMethod.POST})
     public String appraise(@ApiParam(name = "desc",value="评论内容") @RequestParam(value = "desc", required = true) String desc,
    		 @ApiParam(name = "appPack",value="包名") @RequestParam(value = "appPack", required = true) String appPack,
    		 @ApiParam(name = "token",value="用户token") @RequestParam(value = "token", required = true) String token){
		 LOGGER.info("--------------------------------------------home/appraise:"+appPack);
	    String result = StringUtils.EMPTY;
        
        try {
	    	  
        	 if(!StringUtils.isNotBlank(appPack)){
             	
         	    result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"APP的包名必须填写");
     			
     			return result;
         }
         if(!StringUtils.isNotBlank(desc)){
         	
         	result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"评论内容必须填写");
         	
         	return result;
         }
         if(!StringUtils.isNotBlank(token)){
         	
         	result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"请从新登录");
         	
         	return result;
         }
         
         result =  storeHouseService.appraise(appPack,token,desc);
        } catch (Exception e) {
        	
        	LOGGER.error("系统异常" + e.getLocalizedMessage());
        	result = NotifyUtil.error(ErrorCodeEnum.OPERATERROE,e.getLocalizedMessage());
           
        }
       
	    return result;
 }
	 
	//手机服务
	 @RequestMapping(value = "/home/phoneService",
	        	method = {RequestMethod.GET,RequestMethod.POST})
		@ApiOperation(value = "领取碎屏 ---手机服务/碎屏")
		public String phoneService(  @ApiParam(name = "token",value="用户token") @RequestParam(value = "token", required = true) String token,
									 @ApiParam(name = "insureName",value="投保人") @RequestParam(value = "insureName", required = true) String insureName,
									 @ApiParam(name = "insurePhone",value="投保人 电话") @RequestParam(value = "insurePhone", required = true) String insurePhone,
									 @ApiParam(name = "insureCare",value="投保人 身份证") @RequestParam(value = "insureCare", required = true) String insureCare,
									 @ApiParam(name = "phoneModel",value="手机型号") @RequestParam(value = "phoneModel", required = true) String phoneModel,
									 @ApiParam(name = "phoneBrand",value="手机品牌") @RequestParam(value = "phoneBrand", required = true) String phoneBrand,
									 @ApiParam(name = "phoneImei",value="手机IMEI") @RequestParam(value = "phoneImei", required = true) String phoneImei){
		 
		 
		 LOGGER.info("--------------------------------------------home/phoneServic:"+token);
		 String result = StringUtils.EMPTY;
			 try {
				 
			   if(!StringUtils.isNotBlank(token)){
		        	
	       	   result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"token 信息必须填写");
	   			
	   			return result;
	          }
			   if(!StringUtils.isNotBlank(insureName)&&!StringUtils.isNotBlank(insurePhone)&&!StringUtils.isNotBlank(insureCare)&&!StringUtils.isNotBlank(phoneModel)&&!StringUtils.isNotBlank(phoneBrand)&&!StringUtils.isNotBlank(phoneImei)){
				   
				   result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"缺少必要填写项");
				   
				   return result;
			   }
			  
			  result = homePageService.phoneService(token,insureName,insurePhone,insureCare,phoneModel,phoneBrand,phoneImei);
			  
		 } catch (Exception e) {
			 e.printStackTrace();
			 result = NotifyUtil.error(ErrorCodeEnum.OPERATERROE,e.getLocalizedMessage());
	 
	        
	     }
			return result;
		}
	 @RequestMapping(value = "/home/queryScreen",
	        	method = {RequestMethod.GET,RequestMethod.POST})
		@ApiOperation(value = "查询--手机服务")
		public String queryScreen(@ApiParam(name = "token",value="用户token") @RequestParam(value = "token", required = true) String token){
		 
		 LOGGER.info("--------------------------------------------home/phoneServiceAddress:"+token);
		 String result = StringUtils.EMPTY;
			 try {
				 
			   if(!StringUtils.isNotBlank(token)){
		        	
	       	   result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"token 信息必须填写");
	   			
	   			return result;
	          }
			
			  
			  result = homePageService.queryScreen(token);
			  
		 } catch (Exception e) {
			 e.printStackTrace();
			 result = NotifyUtil.error(ErrorCodeEnum.OPERATERROE,e.getLocalizedMessage());
	 
	        
	     }
			return result;
}
	//地址
		 @RequestMapping(value = "/home/serviceAddress",
		        	method = {RequestMethod.GET,RequestMethod.POST})
			@ApiOperation(value = "提交地址 --手机服务//")
			public String serviceAddress(@ApiParam(name = "token",value="用户token") @RequestParam(value = "token", required = true) String token,
					     @ApiParam(name = "address",value = "地址(省,市,区,省编码,市编码,区编码,详细地址)全部用逗号分隔") @RequestParam(value = "address", required = false) String address,
					     @ApiParam(name = "name",value="寄货人姓名") @RequestParam(value = "name", required = true) String name,
					     @ApiParam(name = "phone",value="寄货人联系地址") @RequestParam(value = "phone", required = true) String phone){
			 
			 LOGGER.info("--------------------------------------------home/phoneServiceAddress:"+token);
			 String result = StringUtils.EMPTY;
				 try {
					 
				   if(!StringUtils.isNotBlank(token)){
			        	
		       	   result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"token 信息必须填写");
		   			
		   			return result;
		          }
				
				  
				  result = homePageService.phoneServiceAddress(token,name,phone,address);
				  
			 } catch (Exception e) {
				 e.printStackTrace();
				 result = NotifyUtil.error(ErrorCodeEnum.OPERATERROE,e.getLocalizedMessage());
		 
		        
		     }
				return result;
	}
		 
	//福利
	 @RequestMapping(value = "/home/welfarePage",
	        	method = {RequestMethod.GET,RequestMethod.POST})
		@ApiOperation(value = "福利")
		public String welfarePage(@ApiParam(name = "token",value="用户token") @RequestParam(value = "token", required = true) String token,
				@ApiParam(name = "page",value="起始页 0开始") @RequestParam(value = "page", required = false) Integer page,
				@ApiParam(name = "size",value="每页显示条数") @RequestParam(value = "size", required = false) Integer size,
		 @ApiParam(name = "plat",value="1.android 2.ios") @RequestParam(value = "plat", required = false) Integer plat,
		 @ApiParam(name = "type",value="1.福利 2.网吧 3.网页游戏") @RequestParam(value = "type", required = false) Integer type){
			
		 LOGGER.info("--------------------------------------------home/welfarePage:"+token);
		 String result = StringUtils.EMPTY;
			 try {
		
			   if(!StringUtils.isNotBlank(token)){
		        	
	       	   result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"token 信息必须填写");
	   			
	   			return result;
	          }
			  result = homePageService.welfarePage(token,page,size,plat,type);
			  LOGGER.info("--------------------------------------------home/welfarePage:"+result);
		 } catch (Exception e) {
			 e.printStackTrace();
			 result = NotifyUtil.error(ErrorCodeEnum.OPERATERROE,e.getLocalizedMessage());
	 
	        
	     }
			return result;
		}
     
	 @RequestMapping(value = "/home/saveMoneyPage",
	        	method = {RequestMethod.GET,RequestMethod.POST})
		@ApiOperation(value = "ios 看小说")
		public String saveMoneyPage(@ApiParam(name = "token",value="用户token") @RequestParam(value = "token", required = true) String token,
				@ApiParam(name = "plat",value="1.android 2.ios") @RequestParam(value = "plat", required = false) Integer plat,
				@ApiParam(name = "type",value="3.看小说") @RequestParam(value = "type", required = false) Integer type){
			
		 LOGGER.info("--------------------------------------------home/saveMoneyPage:"+token);
		 String result = StringUtils.EMPTY;
			 try {
		
			   if(!StringUtils.isNotBlank(token)){
		        	
	       	   result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"token 信息必须填写");
	   			
	   			return result;
	          }
			   Integer page  = 0;
			   Integer size  = 0;
			   result = homePageService.ioswelfarePage(token,page,size,plat,type);
			  
		 } catch (Exception e) {
			 e.printStackTrace();
			 result = NotifyUtil.error(ErrorCodeEnum.OPERATERROE,e.getLocalizedMessage());
	 
	        
	     }
			return result;
		}

	 @RequestMapping(value = "/home/readingPage",
	        	method = {RequestMethod.GET,RequestMethod.POST})
		@ApiOperation(value = "看小说")
		public String readingPage(@ApiParam(name = "token",value="用户token") @RequestParam(value = "token", required = true) String token,
				@ApiParam(name = "type",value="1.小说 2.回收 3.维修") @RequestParam(value = "type", required = false) Integer type){
			
		 LOGGER.info("--------------------------------------------home/readingPage:"+token);
		 String result = StringUtils.EMPTY;
			 try {
		
			   if(!StringUtils.isNotBlank(token)){
		        	
	       	   result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"token 信息必须填写");
	   			
	   			return result;
	          }
			  result = homePageService.readingPage(token,type);
			  
		 } catch (Exception e) {
			 e.printStackTrace();
			 result = NotifyUtil.error(ErrorCodeEnum.OPERATERROE,e.getLocalizedMessage());
	 
	        
	     }
			return result;
		}
	  //更多应用
	 @ApiOperation(value = "更多应用/")
	 @RequestMapping(value = "/home/moreApp",
	        	method = {RequestMethod.GET,RequestMethod.POST})
		public String moreApp
		(@ApiParam(name = "token",value="用户toke") @RequestParam(value = "token", required = true) String token,
				@ApiParam(name = "type",value="app类型 1.首页 2.游戏") @RequestParam(value = "type", required = false) Integer type,
				@ApiParam(name = "page",value="起始页 0开始") @RequestParam(value = "page", required = true) String page,
				@ApiParam(name = "size",value="每页显示条数") @RequestParam(value = "size", required = true) String size
				){
			 
		 LOGGER.info("--------------------------------------------home/moreApp:"+type);
		 String result = StringUtils.EMPTY;
			  
			  try {
		    	  
				  if(!StringUtils.isNotBlank(token)){
			        	
			       	   result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"token 信息必须填写");
			   			
			   			return result;
			          }
					  result = homePageService.moreApp(token,type,page,size);
		        } catch (Exception e) {
		        	
		        	LOGGER.error("系统异常" + e.getLocalizedMessage());
		        	result = NotifyUtil.error(ErrorCodeEnum.OPERATERROE,e.getLocalizedMessage());
		           
		        }
			  
			return result;
		}
	 
	 //类型更多应用
	 @ApiOperation(value = "类型下面更多应用")
	 @RequestMapping(value = "/home/moreTypeApp",
	        	method = {RequestMethod.GET,RequestMethod.POST})
		public String moreTypeApp(@ApiParam(name = "token",value="用户toke") @RequestParam(value = "token", required = true)String token,
				@ApiParam(name = "page",value="起始页 0开始") @RequestParam(value = "page", required = true) String page,
				@ApiParam(name = "size",value="每页显示条数") @RequestParam(value = "size", required = true) String size,
				@ApiParam(name = "type",value="应用类型分类,参考APP列表app_Type") @RequestParam(value = "type", required = true) String type){
		 LOGGER.info("--------------------------------------------home/moreTypeApp:"+type);	 
		 String result = StringUtils.EMPTY;
			  try {
		    	  
				  if(!StringUtils.isNotBlank(token)){
			        	
			       	   result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"token 信息必须填写");
			   			
			   			return result;
			          }
					  result = homePageService.moreTypeApp(token,page,size,type);
		        } catch (Exception e) {
		        	
		        	LOGGER.error("系统异常" + e.getLocalizedMessage());
		        	result = NotifyUtil.error(ErrorCodeEnum.OPERATERROE,e.getLocalizedMessage());
		           
		        }
			  
			return result;
		}
	    
	 //小说 二手回收  手机维修
}
