<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yqbing.servicebing.repository.database.dao.NotifyLogMapper" >
  <resultMap id="BaseResultMap" type="com.yqbing.servicebing.repository.database.bean.NotifyLog" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="customer_id" property="customerId" jdbcType="INTEGER" />
    <result column="order_id" property="orderId" jdbcType="VARCHAR" />
    <result column="trade_id" property="tradeId" jdbcType="VARCHAR" />
    <result column="notify_status" property="notifyStatus" jdbcType="SMALLINT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.yqbing.servicebing.repository.database.bean.NotifyLogWithBLOBs" extends="BaseResultMap" >
    <result column="notify_msg" property="notifyMsg" jdbcType="LONGVARCHAR" />
    <result column="receive_msg" property="receiveMsg" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, customer_id, order_id, trade_id, notify_status, create_time
  </sql>
  <sql id="Blob_Column_List" >
    notify_msg, receive_msg
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.yqbing.servicebing.repository.database.abstracts.NotifyLogExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from notify_log_2019
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.yqbing.servicebing.repository.database.abstracts.NotifyLogExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from notify_log_2019
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from notify_log_2019
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from notify_log_2019
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.yqbing.servicebing.repository.database.bean.NotifyLogWithBLOBs" useGeneratedKeys="true" keyProperty="id">
    insert into notify_log_2019 (id, customer_id, order_id, 
      trade_id, notify_status, create_time, 
      notify_msg, receive_msg)
    values (#{id,jdbcType=BIGINT}, #{customerId,jdbcType=INTEGER}, #{orderId,jdbcType=VARCHAR}, 
      #{tradeId,jdbcType=VARCHAR}, #{notifyStatus,jdbcType=SMALLINT}, #{createTime,jdbcType=TIMESTAMP}, 
      #{notifyMsg,jdbcType=LONGVARCHAR}, #{receiveMsg,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.yqbing.servicebing.repository.database.bean.NotifyLogWithBLOBs" useGeneratedKeys="true" keyProperty="id">
    insert into notify_log_2019
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="customerId != null" >
        customer_id,
      </if>
      <if test="orderId != null" >
        order_id,
      </if>
      <if test="tradeId != null" >
        trade_id,
      </if>
      <if test="notifyStatus != null" >
        notify_status,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="notifyMsg != null" >
        notify_msg,
      </if>
      <if test="receiveMsg != null" >
        receive_msg,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="customerId != null" >
        #{customerId,jdbcType=INTEGER},
      </if>
      <if test="orderId != null" >
        #{orderId,jdbcType=VARCHAR},
      </if>
      <if test="tradeId != null" >
        #{tradeId,jdbcType=VARCHAR},
      </if>
      <if test="notifyStatus != null" >
        #{notifyStatus,jdbcType=SMALLINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="notifyMsg != null" >
        #{notifyMsg,jdbcType=LONGVARCHAR},
      </if>
      <if test="receiveMsg != null" >
        #{receiveMsg,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yqbing.servicebing.repository.database.abstracts.NotifyLogExample" resultType="java.lang.Integer" >
    select count(*) from notify_log_2019
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByPrimaryKeySelective" parameterType="com.yqbing.servicebing.repository.database.bean.NotifyLogWithBLOBs" >
    update notify_log_2019
    <set >
      <if test="customerId != null" >
        customer_id = #{customerId,jdbcType=INTEGER},
      </if>
      <if test="orderId != null" >
        order_id = #{orderId,jdbcType=VARCHAR},
      </if>
      <if test="tradeId != null" >
        trade_id = #{tradeId,jdbcType=VARCHAR},
      </if>
      <if test="notifyStatus != null" >
        notify_status = #{notifyStatus,jdbcType=SMALLINT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="notifyMsg != null" >
        notify_msg = #{notifyMsg,jdbcType=LONGVARCHAR},
      </if>
      <if test="receiveMsg != null" >
        receive_msg = #{receiveMsg,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.yqbing.servicebing.repository.database.bean.NotifyLogWithBLOBs" >
    update notify_log_2019
    set customer_id = #{customerId,jdbcType=INTEGER},
      order_id = #{orderId,jdbcType=VARCHAR},
      trade_id = #{tradeId,jdbcType=VARCHAR},
      notify_status = #{notifyStatus,jdbcType=SMALLINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      notify_msg = #{notifyMsg,jdbcType=LONGVARCHAR},
      receive_msg = #{receiveMsg,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yqbing.servicebing.repository.database.bean.NotifyLog" >
    update notify_log_2019
    set customer_id = #{customerId,jdbcType=INTEGER},
      order_id = #{orderId,jdbcType=VARCHAR},
      trade_id = #{tradeId,jdbcType=VARCHAR},
      notify_status = #{notifyStatus,jdbcType=SMALLINT},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>