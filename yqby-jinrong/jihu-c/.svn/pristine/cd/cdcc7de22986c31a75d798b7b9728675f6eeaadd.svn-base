package com.yqbing.servicebing.service.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import com.yqbing.servicebing.common.ErrorCodeEnum;
import com.yqbing.servicebing.repository.database.bean.UserInfoBean;
import com.yqbing.servicebing.repository.database.dao.UserInfoBeanMapper;
import com.yqbing.servicebing.repository.redis.RUserLogBean;
import com.yqbing.servicebing.service.UserLogingService;
import com.yqbing.servicebing.utils.MD5Util;
import com.yqbing.servicebing.utils.NotifyUtil;
import com.yqbing.servicebing.utils.TokenUtils;
import com.yqbing.servicebing.webapp.controller.UserLogingController;


@Service("userLogingService")
@SuppressWarnings("all")
public class UserLogingServiceImpl implements UserLogingService{

	private static final Logger LOGGER = LoggerFactory.getLogger(UserLogingServiceImpl.class);
    
	
	@Resource
	private RUserLogBean rUserLogBean = null;
	@Resource
	private UserInfoBeanMapper userInfoBeanMapper = null;
	@Override
	public String registerUser(String phone, String code,String invite,String password) {
		
		String success = StringUtils.EMPTY;
		//先判断手机号是否注册过
		boolean b = rUserLogBean.existPhone(phone);
		if(b){//存在
			
			return NotifyUtil.error(ErrorCodeEnum.EXISTPHONE, "老弟,请直接登录");
		}
		
		//在判断验证码是否存在/是否超时
		getCode(code,phone);
		//注册成功,返回token//同事缓存到key(phone)redis
		UserInfoBean user = new UserInfoBean();
		user.setPhone(phone);
		String token = TokenUtils.getToken(phone, password);
		user.setToken(token);
		user.setPassword(MD5Util.getMD5String(password));
		user.setType(1+"");
		user.setInviteCode(invite);
		user.setCreateTime(new Date());
		int i = userInfoBeanMapper.insertSelective(user);
		if(i == 0){
			return NotifyUtil.error(ErrorCodeEnum.OPERATERROE, "老弟.不好意思再来一次吧");
		}
		rUserLogBean.sePhone(phone, user);
		rUserLogBean.set(token, user);
		rUserLogBean.setPhonePass(phone, password, user);
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("token",token);
		 
		return NotifyUtil.success(map);
	}
	
	
	@Override
	public String loginUserCode(String phone, String code,UserInfoBean user) {

		
		try {
			//判断验证码是否存在/是否超时
			getCode(phone, code);
		//	UserInfoBean user = rUserLogBean.getPhone(phone);
			if(user != null){
				String token = TokenUtils.getToken(phone, user.getPassword());
				
				user.setToken(token);
				user.setUpdateTime(new Date());
				rUserLogBean.sePhone(phone, user);
				rUserLogBean.set(token, user);
				
				int i = userInfoBeanMapper.updateByPrimaryKeySelective(user);
				if(i == 0){
					return NotifyUtil.error(ErrorCodeEnum.OPERATERROE, "老弟.不好意思再来一次吧");
				}
				
				
				Map<String,Object> map = new HashMap<String,Object>();
				map.put("token",token);
				
				return NotifyUtil.success(map);
			}else{
				return NotifyUtil.error(ErrorCodeEnum.OPERATERROE, "老弟.不好意思再来一次吧");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}
	@Override
	public String loginUserPass(String phone, String password) {
		// TODO Auto-generated method stub
		UserInfoBean user = rUserLogBean.getPhonePass(phone, password);
		if(user == null){
			user = userInfoBeanMapper.queryPhoneAndpassword(phone,password);
			if(user == null){
				return NotifyUtil.error(ErrorCodeEnum.OPERATERROE, "用户名或者密码错误");
			}
			
		}
            String token = TokenUtils.getToken(phone, user.getPassword());
			try {
				user.setToken(token);
				user.setUpdateTime(new Date());
				rUserLogBean.sePhone(phone, user);
				rUserLogBean.set(token, user);
				rUserLogBean.setPhonePass(phone, password, user);
				int i = userInfoBeanMapper.updateByPrimaryKeySelective(user);
				if(i == 0){
					return NotifyUtil.error(ErrorCodeEnum.OPERATERROE, "老弟.不好意思再来一次吧");
				}
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			Map<String,Object> map = new HashMap<String,Object>();
			map.put("token",token);
			return NotifyUtil.success(map);
	}
	
	public  String getCode(String code,String phone){
		Integer code1 = rUserLogBean.getCode(phone);
		if(code1 == null || code1 == 0){
			
			return NotifyUtil.error(ErrorCodeEnum.EXISTPHONE, "老弟,请重新获取验证码");
			
		}else if(code1 != Integer.valueOf(code)){//验证码错误
			
			return NotifyUtil.error(ErrorCodeEnum.ERRORCODE, "老弟,验证码写错了");
		}
		return null;
	}


	@Override
	public UserInfoBean loginUserCode(String phone) {
		// TODO Auto-generated method stub
		UserInfoBean user = userInfoBeanMapper.queryAndPhone(phone);
		
		return user;
	}


	@Override
	public UserInfoBean queryAndPhone(String phone) {
		// TODO Auto-generated method stub
		return userInfoBeanMapper.queryAndPhone(phone);
	}
	/*<choose>
	<when test="startIndex != null">
		limit #{startIndex}
	</when>
	<otherwise>
		limit 0
	</otherwise>
</choose>
<choose>
	<when test="pageSize != null">
		, #{pageSize}
	</when>
	<otherwise>
		, 10000
	</otherwise>
</choose> */
}
