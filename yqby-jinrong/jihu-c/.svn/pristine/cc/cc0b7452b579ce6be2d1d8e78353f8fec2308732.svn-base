package com.yqbing.servicebing.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.yqbing.servicebing.common.ErrorCodeEnum;
import com.yqbing.servicebing.repository.database.bean.AppBanner;
import com.yqbing.servicebing.repository.database.bean.AppCoupon;
import com.yqbing.servicebing.repository.database.bean.AppRecommend;
import com.yqbing.servicebing.repository.database.bean.StoreHouse;
import com.yqbing.servicebing.repository.database.bean.SysDict;
import com.yqbing.servicebing.repository.database.bean.UserAppTask;
import com.yqbing.servicebing.repository.database.bean.UserInfoBean;
import com.yqbing.servicebing.repository.database.dao.AppBannerExample;
import com.yqbing.servicebing.repository.database.dao.AppBannerMapper;
import com.yqbing.servicebing.repository.database.dao.AppCouponExample;
import com.yqbing.servicebing.repository.database.dao.AppCouponMapper;
import com.yqbing.servicebing.repository.database.dao.AppRecommendMapper;
import com.yqbing.servicebing.repository.database.dao.StoreHouseMapper;
import com.yqbing.servicebing.repository.database.dao.SysDictExample;
import com.yqbing.servicebing.repository.database.dao.SysDictMapper;
import com.yqbing.servicebing.repository.database.dao.UserAppTaskExample;
import com.yqbing.servicebing.repository.database.dao.UserAppTaskMapper;
import com.yqbing.servicebing.repository.database.dao.UserInfoBeanMapper;
import com.yqbing.servicebing.repository.database.dao.AppBannerExample.Criteria;
import com.yqbing.servicebing.repository.redis.RStoreHouseData;
import com.yqbing.servicebing.repository.redis.RUserAppTaskData;
import com.yqbing.servicebing.repository.redis.RUserLogBean;
import com.yqbing.servicebing.service.CommonService;
import com.yqbing.servicebing.service.GameService;
import com.yqbing.servicebing.utils.NotifyUtil;
import com.yqbing.servicebing.webapp.response.GameAppRes;
import com.yqbing.servicebing.webapp.response.GameType;
import com.yqbing.servicebing.webapp.response.GameTypeRes;
import com.yqbing.servicebing.webapp.response.HomeAppRes;
import com.yqbing.servicebing.webapp.response.homePageRes;


@Service("gameService")
@SuppressWarnings("all")
public class GameServiceImpl extends CommonService implements GameService{
    
	
	 @Resource
	 private AppBannerMapper appBannerMapper= null;
	 @Resource
	 private AppCouponMapper appCouponMapper= null;
     @Resource
     private SysDictMapper sysDictMapper= null;
     @Resource
	 private StoreHouseMapper storeHouseMapper= null;
     @Resource
	 private AppRecommendMapper appRecommendMapper= null;
     @Resource
	 private RStoreHouseData rStoreHouseData = null;
     @Resource
	 private RUserAppTaskData rUserAppTaskData = null;
     @Resource
	 private UserAppTaskMapper userAppTaskMapper = null;
     @Resource
	 private UserInfoBeanMapper userInfoBeanMapper = null;
     @Resource
	 private RUserLogBean rUserLogBean = null;
	
	private static final Logger LOGGER = LoggerFactory.getLogger(GameServiceImpl.class);
	@Override
	public String gamePage(String token,String type) {
		
		if(StringUtils.isBlank(type)){
			type = "game_hot_tag";
		}
		Byte s = 0;
		UserInfoBean infoBean = queryTokenByUser(token);
		if(infoBean == null){
			return NotifyUtil.error(ErrorCodeEnum.NOLOGIN, "用户不存在");
			
		}
		GameTypeRes gtr = new GameTypeRes();
		
		SysDictExample example2 = new SysDictExample();
		example2.createCriteria().andParentKeyEqualTo("game_type");
		List<SysDict> list = sysDictMapper.selectByExample(example2);
		List<GameType> types = new ArrayList<GameType>();
		for (SysDict sd : list) {
			GameType gt = new GameType();
			gt.setName(sd.getName());
			gt.setFidkey(sd.getFldkey());
			types.add(gt);
		}
		gtr.setTypes(types);
		if(type.equals("game_hot_tag")){//热门图片
			AppBannerExample example = new AppBannerExample();
			Criteria criteria = example.createCriteria();
			example.setOrderByClause(" sort");
			criteria.andAppCategoryIdEqualTo("hot_banner").andStatusEqualTo(s);
			List<AppBanner> pic = appBannerMapper.selectByExample(example);
			gtr.setPic(pic);
		}
		SysDictExample example3 = new SysDictExample();
		example3.createCriteria().andParentKeyEqualTo(type);
		List<SysDict> list4 = sysDictMapper.selectByExample(example3);
		ArrayList<GameAppRes> list3 = new ArrayList<GameAppRes>();
		for (SysDict sd1 : list4) {
			List<AppRecommend> ares =  appRecommendMapper.queryTagId(sd1.getFldkey());
			for (AppRecommend a : ares) {
				GameAppRes appRes = new GameAppRes();
				StoreHouse sh = rStoreHouseData.getAppPack(a.getAppId());
				if(sh ==  null){
					sh = storeHouseMapper.getByAppPack(a.getAppId());
				}
				
				if(sh ==  null){
					continue;
					//	return NotifyUtil.error(ErrorCodeEnum.NULLOBJECT, "app信息不存在");
				}
				//在我的下载列表 存在不在展示
				if(getIsTrue( infoBean, sh)){
					continue;
				}
				appRes.setSort(a.getSort());
				appRes.setAppName(sh.getAppName());
				appRes.setAppPake(sh.getAppPack());
				appRes.setImg(sh.getAppUrlImg());
				appRes.setUrl(sh.getAppUrl());
				appRes.setId(sh.getId());
				appRes.setTAGID(a.getTagId());
				appRes.setTagIdName(sd1.getName());
				appRes.setAppType(getAppType(sh.getAppType()));
				
				
				if(getLocalApp(infoBean.getId(), sh.getAppPack())){
					appRes.setLocalstatus(1);
			    }
				appRes.setLocalstatus(0);
				appRes.setModule(type);
				list3.add(appRes);
			}
			
			gtr.setApps(list3);
		}
		
		
/*
		// TODO Auto-generated method stub
		List<GameTypeRes> gtys = new ArrayList<GameTypeRes>(6);
		GameTypeRes gameTypeRes0 = new GameTypeRes();
		gtys.add(gameTypeRes0);
		GameTypeRes gameTypeRes1 = new GameTypeRes();
		gtys.add(gameTypeRes1);
		GameTypeRes gameTypeRes2 = new GameTypeRes();
		gtys.add(gameTypeRes2);
		GameTypeRes gameTypeRes3 = new GameTypeRes();
		gtys.add(gameTypeRes3);
		GameTypeRes gameTypeRes4 = new GameTypeRes();
		gtys.add(gameTypeRes4);
	
		Byte s = 0;
		String typeapp = "game_type";
		
		UserInfoBean infoBean = rUserLogBean.getRaw(token);
		
		if(infoBean == null){
			
			infoBean = userInfoBeanMapper.queryToken(token);
		}
		if(infoBean == null){
			return NotifyUtil.error(ErrorCodeEnum.NOLOGIN, "用户不存在");
			
		}
	
		
		SysDictExample example2 = new SysDictExample();
		example2.createCriteria().andParentKeyEqualTo("game_type");
		List<SysDict> list = sysDictMapper.selectByExample(example2);
		for (SysDict sysDict : list) {
			GameTypeRes gameTypeRes = new GameTypeRes();
			gameTypeRes.setFidkey(sysDict.getFldkey());
			gameTypeRes.setName(sysDict.getName());
			if(sysDict.getFldkey().equals("game_hot_tag")){//热门
				AppBannerExample example = new AppBannerExample();
				Criteria criteria = example.createCriteria();
				criteria.andAppCategoryIdEqualTo("hot_banner").andStatusEqualTo(s);
				List<AppBanner> pic = appBannerMapper.selectByExample(example);
				gameTypeRes.setPic(pic);
			}
				SysDictExample example3 = new SysDictExample();
				example3.createCriteria().andParentKeyEqualTo(sysDict.getFldkey());
				List<SysDict> list4 = sysDictMapper.selectByExample(example3);
				
				Map<String,List<GameAppRes>> map = new HashMap<String,List<GameAppRes>>();
                for (int i = 0; i < list4.size(); i++) {
					
					ArrayList<GameAppRes> list3 = new ArrayList<GameAppRes>();
					List<AppRecommend> ares =  appRecommendMapper.queryTagId(list4.get(i).getFldkey());
					for (AppRecommend a : ares) {
						GameAppRes appRes = new GameAppRes();
						StoreHouse sh = rStoreHouseData.getAppPack(a.getAppId());
						if(sh ==  null){
							sh = storeHouseMapper.getByAppPack(a.getAppId());
						}
						
						if(sh ==  null){
							continue;
							//	return NotifyUtil.error(ErrorCodeEnum.NULLOBJECT, "app信息不存在");
						}
						//在我的下载列表 存在不在展示
						UserAppTask userAppTask = rUserAppTaskData.getUserAppTask(infoBean.getId()+"", a.getAppId());
						if(userAppTask != null){
							continue;
						}
						appRes.setSort(a.getSort());
						appRes.setAppName(sh.getAppName());
						appRes.setAppPake(sh.getAppPack());
						appRes.setImg(sh.getAppUrlImg());
						appRes.setUrl(sh.getAppUrl());
						appRes.setId(sh.getId());
						appRes.setTAGID(a.getTagId());
						appRes.setTagIdName(list4.get(i).getName());
						list3.add(appRes);
					}
					if(i == 0){
						map.put("onemachine_tag_hot",list3);
					}else{
						map.put("onemachine_tag_game",list3);
					}
					gameTypeRes.setApps(map);
				}
			//	gtys.add(gameTypeRes);
                if(gameTypeRes.getFidkey().equals("game_hot_tag")){
                	gtys.add(0, gameTypeRes);
                }
                if(gameTypeRes.getFidkey().equals("onemachine_tag")){
                	
                	gtys.add(1, gameTypeRes);
                }
                if(gameTypeRes.getFidkey().equals("sports_tag")){
                	
                	gtys.add(2, gameTypeRes);
                }
                if(gameTypeRes.getFidkey().equals("dearchild_tag")){
                	
                	gtys.add(3, gameTypeRes);
                }
                if(gameTypeRes.getFidkey().equals("girlsbest_tag")){
                	
                	gtys.add(4, gameTypeRes);
                }
                
			
		}
		 
		return NotifyUtil.success(gtys);*/
		
		
		
		
		
		 return NotifyUtil.success(gtr);
	}
	
	
	
	@Override
	public String moreGamePage(String token, String page, String size,
			String fidkey) {
		// TODO Auto-generated method stub
		return null;
	}



	@Override
	public String gamePeck(String token, int page, int size) {
		// TODO Auto-generated method stub
		Byte s = 0;
		UserInfoBean infoBean = queryTokenByUser(token);
		if(infoBean == null){
			return NotifyUtil.error(ErrorCodeEnum.NOLOGIN, "用户不存在");
			
		} 
		
		 AppCouponExample example = new AppCouponExample();
		 example.createCriteria().andCategoryIdEqualTo("game_coupon_type").andTotalNumberGreaterThan(0);
	//	 example.setPage(" limt "+page+","+size);
		 example.setOrderByClause(" createtime desc");
		 List<AppCoupon> list = appCouponMapper.selectByExampleWithBLOBs(example);
		 return NotifyUtil.success(list);
	}
	
	
	

}
