package com.yqbing.servicebing.webapp.controller;

import javax.annotation.Resource;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.yqbing.servicebing.common.ErrorCodeEnum;
import com.yqbing.servicebing.service.AccountService;
import com.yqbing.servicebing.service.ChargBoxService;
import com.yqbing.servicebing.utils.NotifyUtil;

/**
 * 

 * @ClassName: ChargBoxController

 * @Description: 充电宝管理接口

 * @author: mpb

 * @date: 2019年4月15日 下午2:54:40
 */
@RestController
@CrossOrigin
@Api(tags = "充电宝接口")
@SuppressWarnings("all")
public class ChargBoxController  extends BaseController{

	private static final Logger LOGGER = LoggerFactory.getLogger(ChargBoxController.class);
	@Resource
	private ChargBoxService chargBoxService = null;
	//任务列表
	//我的任务下载列表
	 @ApiOperation(value = "充电宝首页")
	@RequestMapping(value = "/ChargBox/chargHomePage",
		        	method = {RequestMethod.GET,RequestMethod.POST})
	public String chargHomePage(
			@ApiParam(name = "token",value="用户token") @RequestParam(value = "token", required = true) String token,
			@ApiParam(name = "deviceId",value="充电宝设备id") @RequestParam(value = "deviceId", required = true) String deviceId){
			
		        LOGGER.info("--------------------------------------------ChargBox/chargHomePage:"+token+"deviceId:"+deviceId);
			    String result = StringUtils.EMPTY;
		        
		        try {
		        	 if(!StringUtils.isNotBlank(token)){
				        	
			        	    result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"token必须填写");
			    			
			    			return result;
			        }
		        	 if(!StringUtils.isNotBlank(token)){
		        		 
		        		 result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"设备id不能为空");
		        		 
		        		 return result;
		        	 }
			        
			        result =  chargBoxService.chargHomePage(token,deviceId);
		         
		        } catch (Exception e) {
		        	e.printStackTrace();
		        	LOGGER.error("系统异常" + e.getLocalizedMessage());
		        	result = NotifyUtil.error(ErrorCodeEnum.OPERATERROE,e.getLocalizedMessage());
		           
		        }
		       
			    return result;
		 }
	

	 //获取支付参数
	 @ApiOperation(value = "获取支付参数")
		@RequestMapping(value = "/ChargBox/getOrder",
			        	method = {RequestMethod.GET,RequestMethod.POST})
		public String getOrder(@ApiParam(name = "token",value="用户token") @RequestParam(value = "token", required = true) String token,
				@ApiParam(name = "ideaId",value="套餐列表ID") @RequestParam(value = "ideaId", required = true) String ideaId,
				@ApiParam(name = "deviceId",value="设备地址") @RequestParam(value = "deviceId", required = true) String deviceId,
				@ApiParam(name = "type",value="0支取订单号  1微信 2支付宝 3免费 ") @RequestParam(value = "type", required = true) Integer type){
		 LOGGER.info("--------------------------------------------ChargBox/getOrder:"+ideaId+"<>"+deviceId+"<>"+type);
		    String result = StringUtils.EMPTY;
	        
	        try {
	        	 if(!StringUtils.isNotBlank(token)){
			        	
		        	    result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"token必须填写");
		    			
		    			return result;
		        }
	        	
	        	 if(!StringUtils.isNotBlank(ideaId)){
	        		 
	        		 result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"orderNo必须填写");
	        		 
	        		 return result;
	        	 }
	        	 if(!StringUtils.isNotBlank(deviceId)){
	        		 
	        		 result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"deviceId必须填写");
	        		 
	        		 return result;
	        	 }
	        	 
		        
		        result =  chargBoxService.getOrder(token,ideaId,deviceId,type);
	         
	        } catch (Exception e) {
	        	e.printStackTrace();
	        	LOGGER.error("系统异常" + e.getLocalizedMessage());
	        	result = NotifyUtil.error(ErrorCodeEnum.OPERATERROE,e.getLocalizedMessage());
	           
	        }
	       
		    return result;
		 }
	 
	 //回调地址-->存入数据库1556201267995
	 
	 
	 //返回充值密码
	@ApiOperation(value = "返回充值密码/充电")
	@RequestMapping(value = "/ChargBox/boxPassword",
		        	method = {RequestMethod.GET,RequestMethod.POST})
	public String boxPassword(@ApiParam(name = "token",value="用户token") @RequestParam(value = "token", required = true) String token,
			@ApiParam(name = "orderNo",value="订单号") @RequestParam(value = "orderNo", required = true) String orderNo,
			@ApiParam(name = "deviceId",value="设备地址") @RequestParam(value = "deviceId", required = true) String deviceId){
		    LOGGER.info("--------------------------------------------ChargBox/boxPassword:"+orderNo+"<>"+deviceId);
		    String result = StringUtils.EMPTY;
	        
	        try {
	        	 if(!StringUtils.isNotBlank(token)){
			        	
		        	    result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"token必须填写");
		    			
		    			return result;
		        }
	        	
	        	 if(!StringUtils.isNotBlank(orderNo)){
	        		 
	        		 result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"orderNo必须填写");
	        		 
	        		 return result;
	        	 }
	        	 if(!StringUtils.isNotBlank(deviceId)){
	        		 
	        		 result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"deviceId必须填写");
	        		 
	        		 return result;
	        	 }
	        	 
		        
		        result =  chargBoxService.boxPassword(token,orderNo,deviceId);
	         
	        } catch (Exception e) {
	        	e.printStackTrace();
	        	LOGGER.error("系统异常" + e.getLocalizedMessage());
	        	result = NotifyUtil.error(ErrorCodeEnum.OPERATERROE,e.getLocalizedMessage());
	           
	        }
	       
		    return result;
	 }
	
	/*@ApiOperation(value = "充值状态")
	@RequestMapping(value = "/ChargBox/boxIsPay",
		        	method = {RequestMethod.GET,RequestMethod.POST})
	public String boxIsPay(){
		 return null;
	 }*/
	
	@ApiOperation(value = "充值记录/订单记录")
	@RequestMapping(value = "/ChargBox/boxOrder",
		        	method = {RequestMethod.GET,RequestMethod.POST})
	public String boxOrder(@ApiParam(name = "token",value="用户token") @RequestParam(value = "token", required = true) String token){
		
		 LOGGER.info("--------------------------------------------ChargBox/boxOrder:"+token);
		    String result = StringUtils.EMPTY;
	        
	        try {
	        	 if(!StringUtils.isNotBlank(token)){
			        	
		        	    result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"token必须填写");
		    			
		    			return result;
		        }
	        	
		        
		        result =  chargBoxService.boxOrder(token);
	         
	        } catch (Exception e) {
	        	e.printStackTrace();
	        	LOGGER.error("系统异常" + e.getLocalizedMessage());
	        	result = NotifyUtil.error(ErrorCodeEnum.OPERATERROE,e.getLocalizedMessage());
	           
	        }
	       
		    return result;
	 }
	
	@ApiOperation(value = "充值记录详情/订单记录详情")
	@RequestMapping(value = "/ChargBox/boxOrderDatail",
		        	method = {RequestMethod.GET,RequestMethod.POST})
	public String boxOrderDatail(){
		 return null;
	 }
	
	
}
