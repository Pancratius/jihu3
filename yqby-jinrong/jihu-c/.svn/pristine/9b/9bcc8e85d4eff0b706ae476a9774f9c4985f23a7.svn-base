package com.yqbing.servicebing.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.yqbing.servicebing.common.ErrorCodeEnum;
import com.yqbing.servicebing.repository.database.bean.StoreHouse;
import com.yqbing.servicebing.repository.database.bean.UserAppTask;
import com.yqbing.servicebing.repository.database.bean.UserInfoBean;
import com.yqbing.servicebing.repository.database.bean.UserLocalApp;
import com.yqbing.servicebing.repository.database.dao.StoreHouseMapper;
import com.yqbing.servicebing.repository.database.dao.UserAppTaskExample;
import com.yqbing.servicebing.repository.database.dao.UserAppTaskExample.Criteria;
import com.yqbing.servicebing.repository.database.dao.UserAppTaskMapper;
import com.yqbing.servicebing.repository.database.dao.UserInfoBeanMapper;
import com.yqbing.servicebing.repository.database.dao.UserLocalAppMapper;
import com.yqbing.servicebing.repository.redis.RStoreHouseData;
import com.yqbing.servicebing.repository.redis.RUserAppTaskData;
import com.yqbing.servicebing.repository.redis.RUserLogBean;
import com.yqbing.servicebing.service.AccountService;
import com.yqbing.servicebing.utils.NotifyUtil;
import com.yqbing.servicebing.webapp.response.UserDownAppRes;


@Service("accountService")
@SuppressWarnings("all")
public class AccountServiceImpl implements AccountService{
	
	
	 private static final Logger LOGGER = LoggerFactory.getLogger(AccountServiceImpl.class);
	 @Resource
	 private UserInfoBeanMapper userInfoBeanMapper = null;
	 @Resource
	 private StoreHouseMapper storeHouseMapper = null;
	 
	 @Resource
	 private RUserLogBean rUserLogBean = null;
	 @Resource
	 private RUserAppTaskData rUserAppTaskData = null;
	 @Resource
	 private RStoreHouseData rStoreHouseData = null;
	 @Resource
	 private UserLocalAppMapper userLocalAppMapper = null;
	 @Resource
	 private UserAppTaskMapper userAppTaskMapper = null;
	 @Override
	 public String bindingInvite(String token, String invite,String storeId) {
		// TODO Auto-generated method stub
		try {
			UserInfoBean infoBean = rUserLogBean.getRaw(token);
			if(infoBean == null){
				
				infoBean = userInfoBeanMapper.queryToken(token);
			}
			if(infoBean != null){
				
				String firstInviteCode = infoBean.getFirstInviteCode();
				if(StringUtils.isBlank(firstInviteCode)){//第-次绑定
					
					infoBean.setFirstInviteCode(firstInviteCode);
					infoBean.setInviteCode(firstInviteCode);
					infoBean.setStoreId(Integer.valueOf(storeId));
					
					
				}else{//第二次绑定,FirstInviteCode永远不能改变
					infoBean.setInviteCode(firstInviteCode);
					infoBean.setFirstStoreId(Integer.valueOf(storeId));
					
				}
				int i = userInfoBeanMapper.updateByPrimaryKeySelective(infoBean);
				if(i > 0){
					rUserLogBean.set(token, infoBean);
					return NotifyUtil.success();
				}
				
			}else{
				return NotifyUtil.error(ErrorCodeEnum.NOLOGIN, "用户不存在不存在");
			}
		} catch (Exception e) {
			e.printStackTrace();
			return NotifyUtil.error(ErrorCodeEnum.SYSTEMERROR, "系统异常");
		}
		
		
		return NotifyUtil.error(ErrorCodeEnum.SYSTEMERROR, "系统异常");
	}
	@Override
	public String quitUser(String token) {
		
		try {
			UserInfoBean infoBean = rUserLogBean.getRaw(token);
			if(infoBean == null){
				
				infoBean = userInfoBeanMapper.queryToken(token);
			}
			if(infoBean == null){
				return NotifyUtil.error(ErrorCodeEnum.NOLOGIN, "用户不存在");
				
				
			}else{
				infoBean.setToken(null);
				userInfoBeanMapper.updateByPrimaryKeySelective(infoBean);
				rUserLogBean.remove(token);
				return NotifyUtil.success();
			}
		  } catch (Exception e) {
			e.printStackTrace();
			return NotifyUtil.error(ErrorCodeEnum.SYSTEMERROR, "系统异常");
		  }
	}
	@Override
	public String uploadLogImg(String token, String imgUrl,String userName) {
		try {
			UserInfoBean infoBean = rUserLogBean.getRaw(token);
			if(infoBean == null){
				
				infoBean = userInfoBeanMapper.queryToken(token);
			}
			if(infoBean == null){
				return NotifyUtil.error(ErrorCodeEnum.NOLOGIN, "用户不存在");
				
				
			}else{
				infoBean.setImage(imgUrl);
				infoBean.setName(userName);
				userInfoBeanMapper.updateByPrimaryKeySelective(infoBean);
				rUserLogBean.set(token, infoBean);
				
				return NotifyUtil.success();
			}
		  } catch (Exception e) {
			e.printStackTrace();
			return NotifyUtil.error(ErrorCodeEnum.SYSTEMERROR, "系统异常");
		  }
	}
	@Override
	public String localApp(Map<String, Object> map) {
		ArrayList<UserLocalApp> list = new ArrayList<UserLocalApp>();
		UserLocalApp  uApp =null;
		try {
			String apps = (String) map.get("apps");
			String device = (String) map.get("device");
			String token = (String) map.get("token");
			UserInfoBean infoBean = rUserLogBean.getRaw(token);
			if(infoBean == null){
				
				infoBean = userInfoBeanMapper.queryToken(token);
				if(infoBean == null){
					return NotifyUtil.error(ErrorCodeEnum.NOLOGIN, "用户不存在");
					
				}
			}
			if(StringUtils.isBlank(apps)){
				return NotifyUtil.error(ErrorCodeEnum.NULLPARAM, "app信息不能为空");
			}
			String[] applist = apps.split(",");
			for(String app : applist) {//包名
			//	String[] a = app.split(";");
				UserLocalApp localApp = new UserLocalApp();
				localApp.setAppName("");
				uApp =userLocalAppMapper.queryPackAnduserId(app,infoBean.getId());
				if(uApp != null){//已经存在
					continue;
				}
				localApp.setAppPack(app);
			//	localApp.setAppVersion(a[1]);
				localApp.setDevice(device);
				localApp.setUserId(infoBean.getId());
				localApp.setCreateTime(new Date());
				list.add(localApp);
				userLocalAppMapper.insertSelective(localApp);
			}
		} catch (Exception e) {
			e.printStackTrace();
			return NotifyUtil.error(ErrorCodeEnum.SYSTEMERROR, "请刷新,重试");
		}
		
		
		return NotifyUtil.success();
	}
	@Override
	public String userDownApp(Map<String, Object> map) {//包名 
		
		Byte t = 0;
		StoreHouse sh = null;
		UserAppTask appTask = null;
		try {
			String appPack = (String) map.get("appPack");
			String device = (String) map.get("device");
			String token = (String) map.get("token");
			UserInfoBean infoBean = rUserLogBean.getRaw(token);
			if(infoBean == null){
				
				infoBean = userInfoBeanMapper.queryToken(token);
				if(infoBean == null){
					return NotifyUtil.error(ErrorCodeEnum.NOLOGIN, "用户不存在");
					
				}
			}
			if(StringUtils.isBlank(appPack)){
				return NotifyUtil.error(ErrorCodeEnum.NULLPARAM, "app信息不能为空");
			}
			//判断用户是否下载过
			appTask =  rUserAppTaskData.getUserAppTask(infoBean.getId()+"", appPack);
			if(appTask == null){
				appTask = userAppTaskMapper.queryPackAndUserId(appPack,infoBean.getId());
			}
			
			/*if(appTask != null){
				return NotifyUtil.error(ErrorCodeEnum.USERALREADYAPP, "用户已经下载过了");
			}*/
			
			sh = rStoreHouseData.getAppPack(appPack);
			if(sh ==  null){
				 sh = storeHouseMapper.getByAppPack(appPack);
			}else{
				return NotifyUtil.error(ErrorCodeEnum.NULLOBJECT, "app信息不能为空");
			}
			
			appTask = new UserAppTask();
			
			appTask.setAppType(sh.getAppType());
			appTask.setAppImg(sh.getAppUrlImg());
			appTask.setAppUrl(sh.getAppUrl());
			appTask.setAppVersion(sh.getAppVersion());
			appTask.setAppPack(appPack);
			appTask.setAppName(sh.getAppName());
			appTask.setStoreId(sh.getId());
			appTask.setUserId(infoBean.getId());
			appTask.setStatus(t);
			appTask.setTaskType(t);
			appTask.setCreateTime(new Date());
			userAppTaskMapper.insertSelective(appTask);
			rUserAppTaskData.setUserAppTask(infoBean.getId()+"", appTask);
		} catch (Exception e) {
			e.printStackTrace();
			return NotifyUtil.error(ErrorCodeEnum.SYSTEMERROR, "请刷新,重试");
		}
		
		
		return NotifyUtil.success();
	}
	@Override
	public String replaceUserApp(String token) {
		Map<String,Object> map =null;
		ArrayList<UserDownAppRes> udas = new ArrayList<UserDownAppRes>();
		Byte s = 2;
		Byte t = 1;
		UserInfoBean infoBean = rUserLogBean.getRaw(token);
		if(infoBean == null){
			
			infoBean = userInfoBeanMapper.queryToken(token);
			if(infoBean == null){
				return NotifyUtil.error(ErrorCodeEnum.NOLOGIN, "用户不存在");
				
			}
		}
		List<UserAppTask> list = rUserAppTaskData.getUserAppTaskList(infoBean.getId()+"");
		 if(null == list || list.size()<= 0){
			 UserAppTaskExample example = new UserAppTaskExample();
			 Criteria criteria = example.createCriteria();
			 criteria.andUserIdEqualTo(infoBean.getId());
			 list= userAppTaskMapper.selectByExample(example);
			 if(null == list || list.size()<= 0){
					return NotifyUtil.error(ErrorCodeEnum.USERNULLAPP, "没有下载过");
			 }
		}
		 for (UserAppTask ut : list) {
			 StoreHouse sh = rStoreHouseData.getAppPack(ut.getAppPack());
				if(sh ==  null){
					sh = storeHouseMapper.getByAppPack(ut.getAppPack());
				}else{
					return NotifyUtil.error(ErrorCodeEnum.NULLOBJECT, "app信息不能为空");
				}
				//和当前version 作对比不一样的话就取库里的内容
				UserDownAppRes userDownAppRes = new UserDownAppRes();
				userDownAppRes.setAppImg(ut.getAppImg());
				userDownAppRes.setAppName(ut.getAppName());
				userDownAppRes.setAppPack(sh.getAppPack());
				userDownAppRes.setAppType(sh.getAppType());
				userDownAppRes.setAppUrl(sh.getAppUrl());
				userDownAppRes.setId(sh.getId());
				if(ut.getAppVersion().equals(sh.getAppVersion())){//一样就跳过
					userDownAppRes.setStatus(s);//1更新 2打开
				}else{
				
				userDownAppRes.setStatus(t);//1更新 2打开
				udas.add(userDownAppRes);
				}
		}
		 map = new HashMap<String, Object>();
		 map.put("body", udas);
		
		 return NotifyUtil.success(map);
	}
	
	
}
