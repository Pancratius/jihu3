package com.yqbing.servicebing.service.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.yqbing.servicebing.repository.database.bean.PayQrAccountBean;
import com.yqbing.servicebing.repository.database.dao.PayQrAccountBeanMapper;
import com.yqbing.servicebing.repository.redis.RPayAccountLogBean;
import com.yqbing.servicebing.service.IWxAliPayService;
import com.yqbing.servicebing.utils.enums.ErrorCode;
import com.yqbing.servicebing.utils.qr.QrcodeImageUtils;
import com.yqbing.servicebing.utils.web.CommonResult;
import com.yqbing.servicebing.webapp.controller.BaiMeiYunController;
import com.yqbing.servicebing.webapp.wxpay.pay.WxPayData;
import com.yqbing.servicebing.webapp.wxpay.util.Configure;
import com.yqbing.servicebing.webapp.wxpay.util.HttpUtil;
import com.yqbing.servicebing.webapp.wxpay.util.MapUtils;
import com.yqbing.servicebing.webapp.wxpay.util.Signature;
import com.yqbing.servicebing.webapp.wxpay.util.TenpayUtil;
import com.yqbing.servicebing.webapp.wxpay.util.XmlUtil;

@Service("wxAliPayService")
public class WxAliPayServiceImpl extends PublicPayServiceImpl implements IWxAliPayService{
	
	private static final Logger LOGGER = LoggerFactory.getLogger(WxAliPayServiceImpl.class);
	
	
	private static String  PROFIT_URL =  "https://api.mch.weixin.qq.com/pay/profitsharingaddreceiver";
	@Resource
	RPayAccountLogBean rpayAccountLogBean;
	@Resource
	PayQrAccountBeanMapper payQrAccountBeanMapper;
	
	
	@Override
	public CommonResult getPay(int payWay, String pID) {
		
		CommonResult result = null;
		
		if(payWay == 1){//微信
			//授权页面
			//
			
			
		}
		
        if(payWay == 2){//支付宝
			//统一下单
		}
		
		
		
		
		return result;
	}


	@Override
	public CommonResult getAcount(String wx, String ali, String name,String desc, String phone) {
		PayQrAccountBean  pay= payQrAccountBeanMapper.selectBywxORaliORphone(wx,ali,phone);
		if(pay == null){//没有注册过
			pay = new PayQrAccountBean();
			pay.setPid(rpayAccountLogBean.increment(new Date().getTime()));
		}
		String url = "weixin/pay/oauth?pid="+pay.getPid();//进入授权
		pay.setQrUrl(QrcodeImageUtils.drawLogoQRCode("", pay.getPid()+"", url, null));
		pay.setAliAccount(ali);
		pay.setWxAccount(wx);
		pay.setPayName(name);
		pay.setPayPhone(phone);
		pay.setCreateTime(new Date());
		
		//添加微信分账扎账户
		
		Map<String, Object> map = new HashMap<>();
		WxPayData wxdata = getWXPayConfig();
		String appid = wxdata.getWxappid();// 公众帐号
		String mchId =  wxdata.getWxmchId();// 商户号
		String partnerkey = wxdata.getWxpartnerkey();// 商户key
		
		String nonce_str = TenpayUtil.getNonceStr();
		Map<String, Object> packageParams = new HashMap<>();
		packageParams.put("mch_id", mchId);
		packageParams.put("appid", appid);
		packageParams.put("nonce_str", nonce_str);
		Map<String, Object> receiver = new HashMap<>();
		receiver.put("type", "PERSONAL_WECHATID");
		receiver.put("account", pay.getWxAccount());
		receiver.put("name", pay.getPayName());
		receiver.put("relation_type", "SERVICE_PROVIDER");
		packageParams.put("receiver", receiver);
		// 进行签名
		Configure.setKey(partnerkey);
		String sign = Signature.getSign(packageParams);

		String	xml = "<xml>" + "<mch_id>" + mchId + "</mch_id>" + "<appid>" + appid + "</appid>" + "<nonce_str>"
					+ nonce_str + "</nonce_str>" + "<sign>" + sign + "</sign>" + "<receiver>" + receiver
					+ "</receiver>" + "</xml>";
		LOGGER.info(xml);
		LOGGER.info("[appid]:" + appid);
		LOGGER.info("[sign]:" + sign);
		String result = HttpUtil.sendPost(PROFIT_URL, xml);
		LOGGER.info("------------------添加商户------------------");
		LOGGER.info(result);
		Map map1 = null;
		MapUtils mapUtils = null;
		try {
			
		map1 = XmlUtil.doXMLParse(result);
		
		mapUtils = new MapUtils(map1);
		String return_code = mapUtils.getString("return_code");
		String return_msg = mapUtils.getString("return_msg");
		
		if(!return_code.equals("SUCCESS")){
			return new CommonResult(ErrorCode.CODE_PARAM_ERROR,return_msg);
		}
		String result_code = mapUtils.getString("result_code");
		String err_code_des = mapUtils.getString("err_code_des");
        if(!result_code.equals("SUCCESS")){
        	return new CommonResult(ErrorCode.CODE_PARAM_ERROR,err_code_des);
		}
        pay.setWxAdd(result_code);
		if(pay.getId() == null){
			payQrAccountBeanMapper.insert(pay);
		}else{
			payQrAccountBeanMapper.updateByPrimaryKeySelective(pay);
		}
		
		} catch (Exception e) {
			e.printStackTrace();
		}
		Map<String, String> mv = new HashMap<String, String>();
		mv.put("qrimg", pay.getQrUrl());
		mv.put("pid", pay.getPid()+"");
		mv.put("receiver", mapUtils.getString("receiver"));
		return new CommonResult(ErrorCode.CODE_SUCCESS,"成功" ,mv);
	}


	@Override
	public CommonResult queryQR(String wx, String ali, String phone) {
		PayQrAccountBean  pay= payQrAccountBeanMapper.selectBywxORaliORphone(wx,ali,phone);
		return new CommonResult(ErrorCode.CODE_SUCCESS,"成功" ,pay);
	}

}
