package com.yqbing.servicebing.service.impl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.alipay.api.domain.TicketDetailInfo;
import com.yqbing.servicebing.common.ErrorCodeEnum;
import com.yqbing.servicebing.repository.database.bean.City;
import com.yqbing.servicebing.repository.database.bean.GoodsOrder;
import com.yqbing.servicebing.repository.database.bean.GoodsOrderRes;
import com.yqbing.servicebing.repository.database.bean.TakeDddress;
import com.yqbing.servicebing.repository.database.bean.TicketGoods;
import com.yqbing.servicebing.repository.database.bean.TicketGoodsStandard;
import com.yqbing.servicebing.repository.database.bean.UserInfoBean;
import com.yqbing.servicebing.repository.database.dao.CityMapper;
import com.yqbing.servicebing.repository.database.dao.GoodsOrderExample;
import com.yqbing.servicebing.repository.database.dao.GoodsOrderMapper;
import com.yqbing.servicebing.repository.database.dao.TakeDddressExample;
import com.yqbing.servicebing.repository.database.dao.TakeDddressMapper;
import com.yqbing.servicebing.repository.database.dao.TicketGoodsExample;
import com.yqbing.servicebing.repository.database.dao.TicketGoodsMapper;
import com.yqbing.servicebing.repository.database.dao.TicketGoodsStandardExample;
import com.yqbing.servicebing.repository.database.dao.TicketGoodsStandardMapper;
import com.yqbing.servicebing.repository.redis.GoodsOrderLog;
import com.yqbing.servicebing.service.CommonService;
import com.yqbing.servicebing.service.GoodsOrderService;
import com.yqbing.servicebing.utils.NotifyUtil;
import com.yqbing.servicebing.webapp.request.AddressReq;
import com.yqbing.servicebing.webapp.request.AddressRes;
import com.yqbing.servicebing.webapp.request.GoodsOrderReq;


@Service("goodsOrderService")
@SuppressWarnings("all")
public class GoodsOrderServiceImpl extends CommonService implements GoodsOrderService{

	
	
	private static final Logger LOGGER = LoggerFactory.getLogger(GoodsOrderServiceImpl.class);
	@Resource
	private TicketGoodsMapper ticketGoodsMapper = null;
	@Resource
	private TakeDddressMapper takeDddressMapper = null;
	@Resource
	private GoodsOrderMapper goodsOrderMapper = null;
	@Resource
	private TicketGoodsStandardMapper ticketGoodsStandardMapper = null;
	
	
	
	@Resource
	private GoodsOrderLog rgoodsOrderLog = null;
	
	@Resource
	private CityMapper cityMapper = null;
	
	@Override
	public String citys(String token) {
		
		List<City> citys =   cityMapper.queryCitys();
		
		
		return NotifyUtil.success(citys);
	}

	@Override
	public String myAddress(String token) {
		
		UserInfoBean infoBean = queryTokenByUser(token);
		if(infoBean == null){
			return NotifyUtil.error(ErrorCodeEnum.NOLOGIN, "用户不存在");
			
		}
		TakeDddressExample tdressExample = new TakeDddressExample();
		
		tdressExample.createCriteria().andUserIdEqualTo(infoBean.getId());
		
		List<TakeDddress> list = takeDddressMapper.selectByExample(tdressExample);
		
		
		return NotifyUtil.success(list);
	}

	@Override
	public String addAddress(AddressReq req) {
		UserInfoBean infoBean = queryTokenByUser(req.getToken());
		if(infoBean == null){
			return NotifyUtil.error(ErrorCodeEnum.NOLOGIN, "用户不存在");
			
		}
		
		String success = null;
		try {
			TakeDddress dddress = new TakeDddress();
			dddress.setUserId(infoBean.getId());
			dddress.setPhone(req.getPhone());
			dddress.setName(req.getName());
			dddress.setDoornum(req.getDoornum());
			dddress.setSex(req.getSex());
			dddress.setAddress(req.getAddress());
			dddress.setLable(req.getLable());
			dddress.setProvince(req.getProvince());
			dddress.setProvinceCode(req.getProvinceCode());
			dddress.setCity(req.getCity());
			dddress.setCityCode(req.getCityCode());
			dddress.setArea(req.getArea());
			dddress.setAreaCode(req.getAreaCode());
			dddress.setCreateTime(new Date());
			takeDddressMapper.insertSelective(dddress);
		} catch (Exception e) {
			
			
			e.printStackTrace();
			
			success = NotifyUtil.error(ErrorCodeEnum.OPERATERROE);
		}
		
		return success;
	}

	@Override
	public String delAddress(String token, Integer id) {
		
		UserInfoBean infoBean = queryTokenByUser(token);
		if(infoBean == null){
			return NotifyUtil.error(ErrorCodeEnum.NOLOGIN, "用户不存在");
			
		}
		
				String success = null;
				try {
					takeDddressMapper.deleteByPrimaryKey(id);
				} catch (Exception e) {
					
					
					e.printStackTrace();
					
					success = NotifyUtil.error(ErrorCodeEnum.OPERATERROE);
				}
		
		return success;
	}

	@Override
	public String editAddress(AddressReq req) {
		
		UserInfoBean infoBean = queryTokenByUser(req.getToken());
		if(infoBean == null){
			return NotifyUtil.error(ErrorCodeEnum.NOLOGIN, "用户不存在");
			
		}
		String success = null;
		TakeDddress dddress = takeDddressMapper.selectByPrimaryKey(req.getId());
		if(dddress == null){
			success = NotifyUtil.error(ErrorCodeEnum.EXISTADDRESS);
			return success;
		}
		try {
			dddress.setPhone(req.getPhone());
			dddress.setName(req.getName());
			dddress.setDoornum(req.getDoornum());
			dddress.setSex(req.getSex());
			dddress.setAddress(req.getAddress());
			dddress.setLable(req.getLable());
			dddress.setProvince(req.getProvince());
			dddress.setProvinceCode(req.getProvinceCode());
			dddress.setCity(req.getCity());
			dddress.setCityCode(req.getCityCode());
			dddress.setArea(req.getArea());
			dddress.setAreaCode(req.getAreaCode());
			dddress.setUpdateTime(new Date());
			takeDddressMapper.updateByPrimaryKey(dddress);
		} catch (Exception e) {
			
			
			e.printStackTrace();
			
			success = NotifyUtil.error(ErrorCodeEnum.OPERATERROE);
		}
		
		return success;
	}

	
	
	@Override
	public String queryById(String token, Integer id) {
		
		
		UserInfoBean infoBean = queryTokenByUser(token);
		if(infoBean == null){
			return NotifyUtil.error(ErrorCodeEnum.NOLOGIN, "用户不存在");
			
		}
		
		TakeDddress takeDddress = takeDddressMapper.selectByPrimaryKey(id);
		
		AddressRes addressRes = new AddressRes();
		addressRes.setAddress(takeDddress.getProvince()+""+takeDddress.getCity()+""+takeDddress.getArea()+""+takeDddress.getAddress()+""+takeDddress.getDoornum());
		addressRes.setName(takeDddress.getName());
		addressRes.setPhone(takeDddress.getPhone());
		addressRes.setId(takeDddress.getId());
		
		return NotifyUtil.success(takeDddress);
	}

	
	@Override
	public String order(GoodsOrderReq req) {
		
		//付款之前查看账户余额是否支持付款
		UserInfoBean infoBean = queryTokenByUser(req.getToken());
		if(infoBean == null){
			return NotifyUtil.error(ErrorCodeEnum.NOLOGIN, "用户不存在");
			
		}
		Integer wealth =null;
		Integer googsQuantity = null;
		TicketGoods ticketGoods = null;
		BigDecimal Price = null;
		BigDecimal multiply = null;
		try {
			wealth = infoBean.getWealth();//当前财富值
			
			googsQuantity = req.getGoogsNum();//购买数量
			//商品单价
			ticketGoods = ticketGoodsMapper.selectByPrimaryKey(req.getGoodsId());
		     if(ticketGoods == null){
		    	 return NotifyUtil.error(ErrorCodeEnum.PARAMERROE);
		     }
			TicketGoodsStandard goodsStandard = ticketGoodsStandardMapper.selectByPrimaryKey(1);
            if(goodsStandard == null){
            	return NotifyUtil.error(ErrorCodeEnum.PARAMERROE);
		     }
			Price = goodsStandard.getStandardPrice();
			//快递费用
			Integer ex = 1000;
			multiply = Price.multiply(new BigDecimal(googsQuantity)).add(new BigDecimal(ex)).multiply(new BigDecimal(100));
			if(new BigDecimal(wealth).compareTo(multiply) == -1){//财富值>= 商品单价*商品数量+快递费用
				
				return NotifyUtil.error(ErrorCodeEnum.BALANCE);
			}
		//-----------下订单
		
		GoodsOrder goodsOrder = new GoodsOrder();
		TakeDddress takeDddress = takeDddressMapper.selectByPrimaryKey(req.getAddressId());
		if(takeDddress == null){
			return NotifyUtil.error(ErrorCodeEnum.PARAMERROE);
	     }
		goodsOrder.setAddress(takeDddress.getAddress()+" "+takeDddress.getDoornum());
		goodsOrder.setAddressName(takeDddress.getName());
		goodsOrder.setAddressPhone(takeDddress.getPhone());
		
		goodsOrder.setAmount(req.getAmount());
		goodsOrder.setTotalamount(Price.multiply(new BigDecimal(googsQuantity)));
		goodsOrder.setGoodsId(req.getGoodsId());
		goodsOrder.setGoogsNum(googsQuantity);
		//生成订单号
		goodsOrder.setOrderId(rgoodsOrderLog.increment(new Date().getTime())+"");
		goodsOrder.setPrice(req.getPrice());
		goodsOrder.setUserId(infoBean.getId());
		goodsOrder.setExpress(req.getExpress());
		goodsOrder.setCreateTime(new Date());
		goodsOrder.setDoneTime(new Date());
		goodsOrder.setOrderTime(new Date());
		goodsOrder.setPayTime(new Date());
		
		goodsOrder.setGoodsName(ticketGoods.getName());
		
		goodsOrder.setGoodsImg(ticketGoods.getIcon());
		goodsOrder.setPayType(req.getPayType());
			
			goodsOrderMapper.insertSelective(goodsOrder);
		} catch (Exception e) {
			e.printStackTrace();
			return NotifyUtil.error(ErrorCodeEnum.OPERATERROE);
		}
		
		
		return NotifyUtil.success();
	}

	@Override
	public String goodsDatail(String token) {
		
		TicketGoodsExample goodsExample = new TicketGoodsExample();
		goodsExample.setOrderByClause(" create_time desc");
		List<TicketGoods> list = ticketGoodsMapper.selectByExample(goodsExample);
		if(list == null || list.size() == 0){
			return NotifyUtil.error(ErrorCodeEnum.PARAMERROE, "商品不存在");
		}
		
		TicketGoods goods = list.get(0);
		
		TicketGoodsStandardExample standardExample = new TicketGoodsStandardExample();
		standardExample.createCriteria().andGoodsIdEqualTo(goods.getId());
		List<TicketGoodsStandard> standards = ticketGoodsStandardMapper.selectByExample(standardExample);
		if(standards == null){
			return NotifyUtil.error(ErrorCodeEnum.PARAMERROE, "商品不存在");
		}
		goods.setStandards(standards);
		return NotifyUtil.success(goods);
	}

	@Override
	public String myOrders(String token, short type, Integer page, Integer size) {
		
		UserInfoBean infoBean = queryTokenByUser(token);
		if(infoBean == null){
			return NotifyUtil.error(ErrorCodeEnum.NOLOGIN, "用户不存在");
			
		}
		
		List<GoodsOrderRes> goods = goodsOrderMapper.queryList(infoBean.getId(),type ,page*size,size);
		
		
		
		return NotifyUtil.success(goods);
	}

	@Override
	public String orderDetail(String token, Integer id) {
		
		GoodsOrder goodsOrder = goodsOrderMapper.selectByPrimaryKey(id);
		
		
		return NotifyUtil.success(goodsOrder);
	}

	

}
