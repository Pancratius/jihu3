package com.yqbing.servicebing.webapp.controller;

import javax.annotation.Resource;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.yqbing.servicebing.common.ErrorCodeEnum;
import com.yqbing.servicebing.service.HomePageService;
import com.yqbing.servicebing.service.UserLogIngService;
import com.yqbing.servicebing.utils.NotifyUtil;


@RestController
@Api(tags = "首页大图")
@SuppressWarnings("all")
@CrossOrigin
public class HomePageController {

	private static final Logger LOGGER = LoggerFactory.getLogger(HomePageController.class);
	
	
	@Resource
	private HomePageService homePageService = null;
	
	         //4返回下载链接
			@RequestMapping(value = "/Home/downUrl",method = {RequestMethod.GET,RequestMethod.POST},produces = {"application/json;charset=UTF-8"})
			@ApiOperation(value = "根据token获取用户信息")
			public String downUrl(){
				
				String result = StringUtils.EMPTY;
				
				try {
					
					result = homePageService.downUrl();
					LOGGER.info("/laxin/downUrl--------------------------------------返回参数集合:"+result);
				} catch (Exception e) {
					
					e.printStackTrace();
				}
				
				
				
				return result;
			}
		
	
	
	 //首页大图
	
	@RequestMapping(value = "/ticket/homePage",
        	method = {RequestMethod.GET,RequestMethod.POST})
	@ApiOperation(value = "首页")
	public String homePage(@ApiParam(name = "token",value="用户token") @RequestParam(value = "token", required = true) String token,
			               @ApiParam(name="device",value = "设备mac") @RequestParam(value = "device", required = true) String device,
			               @ApiParam(name="version",value = "版本号") @RequestParam(value = "version", required = false) String version){
		
		LOGGER.info("--------------------------------------------home/homePage:"+token);
		String result = StringUtils.EMPTY;
		
		 try {
				   if(!StringUtils.isNotBlank(token)){
			        	
		       	    result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"token 信息必须填写");
		   			
		   			return result;
		          }
				  result = homePageService.homePage(token,device,version);
				  LOGGER.info("--------------------------------------------home/homePage:"+result);
			 } catch (Exception e) {
				 e.printStackTrace();
				 result = NotifyUtil.error(ErrorCodeEnum.OPERATERROE,"操作失败");
		 
		        
		     }
		
        return result;
	}
	
	//收益展示&时间选择
	@RequestMapping(value = "/ticket/queryDate",
        	method = {RequestMethod.GET,RequestMethod.POST})
	@ApiOperation(value = "更多")
	public String homePage(@ApiParam(name = "token",value="用户token") @RequestParam(value = "token", required = true) String token,
			@ApiParam(name="type",value = "0.彩票  1.业务收益 ") @RequestParam(value = "type", required = true) Integer type,
			@ApiParam(name = "stime",value="开始日期 YYYY-MM-DD") @RequestParam(value = "stime", required = false) String stime,
			@ApiParam(name = "etime",value="结束日期 YYYY-MM-DD") @RequestParam(value = "etime", required = false) String etime,
			@ApiParam(name = "page",value="起始页") @RequestParam(value = "page", required = false) Integer page,
			@ApiParam(name = "size",value="每页显示多少条") @RequestParam(value = "size", required = false) Integer size){
		
		LOGGER.info("--------------------------------------------home/queryDate:"+token);
		String result = StringUtils.EMPTY;
		
		 try {
			 
				   if(!StringUtils.isNotBlank(token)){
			        	
		       	    result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"token 信息必须填写");
		   			
		   			return result;
		          }
				  result = homePageService.queryDate(token,type,stime,etime,page,size);
				  LOGGER.info("--------------------------------------------home/queryDate:"+result);
			 } catch (Exception e) {
				 e.printStackTrace();
				 result = NotifyUtil.error(ErrorCodeEnum.OPERATERROE,"操作失败");
		 
		        
		     }
		
        return result;
	}
	
	@RequestMapping(value ={"/downapp/replace"},method=RequestMethod.GET)
	public  String  replaceKX(@ApiParam(name="version",value = "梦想版本") @RequestParam(value = "version", required = true) String version,
			@ApiParam(name="token",value = "token") @RequestParam(value = "token", required = true) String token){
		 LOGGER.info("--------------------------------------------downapp/replace:"+token);
		    String result = StringUtils.EMPTY;
	        
	        try {
	        	 if(!StringUtils.isNotBlank(token)){
			        	
		        	    result = NotifyUtil.error(ErrorCodeEnum.NULLPARAM,"token必须填写");
		    			
		    			return result;
		        }
	        	
		        
		        result =  homePageService.replace(token,version);
	         
	        } catch (Exception e) {
	        	e.printStackTrace();
	        	LOGGER.error("系统异常" + e.getLocalizedMessage());
	        	result = NotifyUtil.error(ErrorCodeEnum.OPERATERROE,e.getLocalizedMessage());
	           
	        }
	       
		    return result;
	}
}
